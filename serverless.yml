# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-code-challenge
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  timeout: 10
  memorySize: 512
  # you can overwrite defaults here
  stage: dev
  region: us-east-1

  # you can add statements to the Lambda function's IAM Role here
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action: # Gives permission to DynamoDB tables in a specific region
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - !Sub
              - "arn:aws:dynamodb:*:*:table/${Table}"
              - { Table: !Ref OrdersTable }
        - Effect: "Allow"
          Action:
            - logs:*
          Resource:
            - "*"

  # you can define service wide environment variables here
  environment:
    TABLE_NAME: !Ref OrdersTable

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  createOrder:
    handler: functions/createOrder/handler.createOrder
    name: ${sls:stage}-createOrder
    description: Creates an order
    events:
      - http:
          path: /order
          method: POST

  getOrder:
    handler: functions/getOrder/handler.getOrder
    name: ${sls:stage}-getOrder
    description: Gets a single order
    events:
      - http:
          path: /order/{orderId}
          method: GET
          private: true
          request:
            parameters:
              paths:
                orderId: true
  updateOrder:
    handler: functions/updateOrder/handler.updateOrder
    name: ${sls:stage}-updateOrder
    description: Update an order
    events:
      - http:
          path: /order/{orderId}/{userId}
          method: PUT
          private: true
          request:
            parameters:
              paths:
                orderId: true
                userId: true
  deleteOrder:
    handler: functions/deleteOrder/handler.deleteOrder
    name: ${sls:stage}-deleteOrder
    description: Delete an order
    events:
      - http:
          path: /order/{orderId}/{userId}
          method: DELETE
          private: true
          request:
            parameters:
              paths:
                orderId: true
                userId: true

# you can add CloudFormation resource templates here
resources:
  Parameters:
    GithubUserName:
      Type: String
      Default: "gjyoungjr"
    GithubRepo:
      Type: String
      Default: "serverlessguru_code_challenge"
    GithubBranch:
      Type: String
      Default: "main"
    GithubOAuthToken:
      Type: String
      Default: "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"

  Resources:
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "OrdersTable"
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    CodePipeline:
      Type: "AWS::CodePipeline::Pipeline"
      Properties:
        RoleArn: !GetAtt CodePipeLineRole.Arn
        Name: "ServerlessPipeline"
        ArtifactStore:
          Location: !Ref PipelineBucket
          Type: S3
        # Stages declaration
        Stages:
          # Download source code from Github Repo to source-output-artifacts path in S3 Bucket
          - Name: Source
            Actions:
              - Name: SourceAction
                ActionTypeId:
                  Category: Source
                  Owner: ThirdParty
                  Provider: GitHub
                  Version: "1"
                OutputArtifacts:
                  - Name: MyApp
                Configuration:
                  Repo: !Ref GithubRepo
                  Branch: !Ref GithubBranch
                  Owner: !Ref GithubUserName
                  OAuthToken: !Ref GithubOAuthToken

          # Build the project using the BuildProject and Output build artifacts to build-output-artifacts path in S3 Bucket
          - Name: Build
            Actions:
              - Name: BuildAction
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Version: "1"
                  Provider: CodeBuild
                InputArtifacts:
                  - Name: MyApp
                OutputArtifacts:
                  - Name: MyAppBuild
                Configuration:
                  ProjectName: !Ref CodeBuild

      # Create role for CodeBuild
    CodeBuildRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - "codebuild.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Path: /service-role/
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "s3:GetObject"
                    - "s3:GetObjectVersion"
                    - "s3:GetBucketVersioning"
                    - "s3:PutObject"
                    - "s3:PutObjectAcl"
                    - "s3:PutObjectVersionAcl"
                  Resource:
                    - !GetAtt PipelineBucket.Arn
                    - !Join ["", [!GetAtt PipelineBucket.Arn, "/*"]]
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                    - "cloudfront:CreateInvalidation"
                  Resource:
                    - "*"

      # Create role for CodePipeline
    CodePipeLineRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - "codepipeline.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "s3:GetObject"
                    - "s3:GetObjectVersion"
                    - "s3:GetBucketVersioning"
                    - "s3:GetObjectAcl"
                    - "s3:PutObject"
                    - "s3:PutObjectAcl"
                    - "s3:PutObjectVersionAcl"
                  Resource:
                    - !GetAtt PipelineBucket.Arn
                    - !Join ["", [!GetAtt PipelineBucket.Arn, "/*"]]
                - Effect: Allow
                  Action:
                    - "codebuild:BatchGetBuilds"
                    - "codebuild:StartBuild"
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - "codecommit:GetRepository"
                    - "codecommit:GetBranch"
                    - "codecommit:GetCommit"
                    - "codecommit:UploadArchive"
                    - "codecommit:GetUploadArchiveStatus"
                    - "codecommit:CancelUploadArchive"
                  Resource: "*"

    # Create Code Build Project
    CodeBuild:
      Type: "AWS::CodeBuild::Project"
      Properties:
        Name: !Sub ${AWS::StackName}-CodeBuild
        ServiceRole: !GetAtt CodeBuildRole.Arn
        Artifacts:
          Type: CODEPIPELINE
          Name: MyProject
        Environment:
          ComputeType: BUILD_GENERAL1_SMALL
          Type: LINUX_CONTAINER
          Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
          EnvironmentVariables:
            - Name: STAGE_NAME
              Value: dev
        Source:
          Type: CODEPIPELINE
          # This file (buildspec.yml In Source code) contains commands to deploy serverless app
          BuildSpec: buildspec.yml

    # Create S3 Buckets (Storing Pipeline Artifacts)
    PipelineBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: "pipelineartifacts-serverless-c01"

  Outputs:
    OrdersTable:
      Description: "Orders Table Name"
      Value: !Ref OrdersTable
