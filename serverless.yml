# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-code-challenge
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  timeout: 10
  memorySize: 512
  # you can overwrite defaults here
  stage: dev
  region: us-east-1

  # you can add statements to the Lambda function's IAM Role here
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action: # Gives permission to DynamoDB tables in a specific region
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - !Sub
              - "arn:aws:dynamodb:*:*:table/${Table}"
              - { Table: !Ref OrdersTable }
        - Effect: "Allow"
          Action:
            - logs:*
          Resource:
            - "*"

  # you can define service wide environment variables here
  environment:
    TABLE_NAME: !Ref OrdersTable

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  createOrder:
    handler: functions/createOrder/handler.createOrder
    name: ${sls:stage}-createOrder
    description: Creates an order
    events:
      - http:
          path: /order
          method: POST

  getOrder:
    handler: functions/getOrder/handler.getOrder
    name: ${sls:stage}-getOrder
    description: Gets a single order
    events:
      - http:
          path: /order/{orderId}
          method: GET
          private: true
          request:
            parameters:
              paths:
                orderId: true
  updateOrder:
    handler: functions/updateOrder/handler.updateOrder
    name: ${sls:stage}-updateOrder
    description: Update an order
    events:
      - http:
          path: /order/{orderId}/{userId}
          method: PUT
          private: true
          request:
            parameters:
              paths:
                orderId: true
                userId: true
  deleteOrder:
    handler: functions/deleteOrder/handler.deleteOrder
    name: ${sls:stage}-deleteOrder
    description: Delete an order
    events:
      - http:
          path: /order/{orderId}/{userId}
          method: DELETE
          private: true
          request:
            parameters:
              paths:
                orderId: true
                userId: true

# you can add CloudFormation resource templates here
resources:
  Resources:
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "OrdersTable"
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

  Outputs:
    OrdersTable:
      Description: "Orders Table Name"
      Value: !Ref OrdersTable
