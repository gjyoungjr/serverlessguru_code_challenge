service: serverless-code-challenge

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  timeout: 10
  memorySize: 512
  stage: dev
  region: us-east-1

  # IAM Roles
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action: # Gives permission to DynamoDB tables in a specific region
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - !Sub
              - "arn:aws:dynamodb:*:*:table/${Table}"
              - { Table: !Ref OrdersTable }
        - Effect: "Allow"
          Action:
            - logs:*
          Resource:
            - "*"
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
            - "s3:GetObjectVersion"
            - "s3:GetBucketVersioning"
            - "s3:PutObject"
            - "s3:PutObjectAcl"
            - "s3:PutObjectVersionAcl"
          Resource:
            - "*"
        - Effect: "Allow"
          Action:
            - "s3:ListBucket"
          Resource:
            {
              "Fn::Join":
                [
                  "",
                  ["arn:aws:s3:::", { "Ref": "ServerlessDeploymentBucket" }],
                ],
            }
        - Effect: "Allow"
          Action:
            - "s3:PutObject"
          Resource:
            Fn::Join:
              - ""
              - - "arn:aws:s3:::"
                - "Ref": "ServerlessDeploymentBucket"
                - "/*"

  # you can define service wide environment variables here
  environment:
    TABLE_NAME: !Ref OrdersTable

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  ## Lambda Functions ##

  # Creates an order
  createOrder:
    handler: functions/createOrder/handler.createOrder
    name: ${sls:stage}-createOrder
    description: Creates an order
    events:
      - http:
          path: /order
          method: POST

  # Retrieve an order
  getOrder:
    handler: functions/getOrder/handler.getOrder
    name: ${sls:stage}-getOrder
    description: Gets a single order
    events:
      - http:
          path: /order/{orderId}
          method: GET
          private: true
          request:
            parameters:
              paths:
                orderId: true
  # Updates an order
  updateOrder:
    handler: functions/updateOrder/handler.updateOrder
    name: ${sls:stage}-updateOrder
    description: Update an order
    events:
      - http:
          path: /order/{orderId}/{userId}
          method: PUT
          private: true
          request:
            parameters:
              paths:
                orderId: true
                userId: true
  # Deletes an order
  deleteOrder:
    handler: functions/deleteOrder/handler.deleteOrder
    name: ${sls:stage}-deleteOrder
    description: Delete an order
    events:
      - http:
          path: /order/{orderId}/{userId}
          method: DELETE
          private: true
          request:
            parameters:
              paths:
                orderId: true
                userId: true

# CloudFormation Template starts here
resources:
  # Stack Parameters
  Parameters:
    GithubUserName:
      Type: String
      Default: "gjyoungjr"
    GithubRepo:
      Type: String
      Default: "serverlessguru_code_challenge"
    GithubBranch:
      Type: String
      Default: "main"
    GithubOAuthToken:
      Type: String
      Default: "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"
    AppName:
      Type: String
      Default: "serverless-code-challenge"

  # Stack Resources
  Resources:
    # Creates a Dynamo DB table with (PK, SK )
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: !Sub ${AWS::StackName}-Orders
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    # Creates a CI/CD Pipeline
    CodePipeline:
      Type: "AWS::CodePipeline::Pipeline"
      Properties:
        RoleArn: !GetAtt CodePipeLineRole.Arn
        Name: !Sub ${AWS::StackName}-CodePipeline
        ArtifactStore:
          Location: !Ref PipelineBucket
          Type: S3
        # Stages declaration
        Stages:
          # Download source code from Github Repo to source-output-artifacts path in S3 Bucket
          - Name: Source
            Actions:
              - Name: Source
                ActionTypeId:
                  Category: Source
                  Owner: ThirdParty
                  Provider: GitHub
                  Version: "1"
                OutputArtifacts:
                  - Name: BuildArtifacts
                Configuration:
                  Repo: !Ref GithubRepo
                  Branch: !Ref GithubBranch
                  Owner: !Ref GithubUserName
                  OAuthToken: !Ref GithubOAuthToken

          # Build the project using the BuildProject and Output build artifacts to build-output-artifacts path in S3 Bucket
          - Name: Build
            Actions:
              - Name: Build
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Version: "1"
                  Provider: CodeBuild
                InputArtifacts:
                  - Name: BuildArtifacts
                OutputArtifacts:
                  - Name: CodeBuildArtifacts
                Configuration:
                  ProjectName: !Ref CodeBuild

          - Name: DeployToDev
            Actions:
              - Name: DeployToDev
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Version: "1"
                  Provider: CodeBuild
                InputArtifacts:
                  - Name: BuildArtifacts
                OutputArtifacts:
                  - Name: ArtifactsDev
                Configuration:
                  ProjectName: !Ref CodeDeployDev

          - Name: ProdApproval
            Actions:
              - Name: ProdApproval
                ActionTypeId:
                  Category: Approval
                  Owner: AWS
                  Version: "1"
                  Provider: Manual
                # InputArtifacts:
                #   - Name: BuildArtifacts
                # OutputArtifacts:
                #   - Name: DeployBuildArtifacts
                # Configuration:
                #   ProjectName: !Ref CodeDeployProd

          - Name: DeployToProd
            Actions:
              - Name: DeployToProdAction
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Version: "1"
                  Provider: CodeBuild
                InputArtifacts:
                  - Name: BuildArtifacts
                OutputArtifacts:
                  - Name: ArtifactsProd
                Configuration:
                  ProjectName: !Ref CodeDeployProd

      ### IAM Roles ###

      # Create role for CodeBuild
    CodeBuildRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - "codebuild.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Path: /
        ManagedPolicyArns: ["arn:aws:iam::aws:policy/AdministratorAccess"]

      # Create role for CodePipeline
    CodePipeLineRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - "codepipeline.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "s3:GetObject"
                    - "s3:GetObjectVersion"
                    - "s3:GetBucketVersioning"
                    - "s3:GetObjectAcl"
                    - "s3:PutObject"
                    - "s3:PutObjectAcl"
                    - "s3:PutObjectVersionAcl"
                  Resource:
                    - "*"
                - Effect: Allow
                  Action:
                    - "codebuild:BatchGetBuilds"
                    - "codebuild:StartBuild"
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - "codecommit:GetRepository"
                    - "codecommit:GetBranch"
                    - "codecommit:GetCommit"
                    - "codecommit:UploadArchive"
                    - "codecommit:GetUploadArchiveStatus"
                    - "codecommit:CancelUploadArchive"
                  Resource: "*"

    # Create Code Build Project
    CodeBuild:
      Type: "AWS::CodeBuild::Project"
      Properties:
        Name: !Sub ${AWS::StackName}-CodeBuild
        ServiceRole: !GetAtt CodeBuildRole.Arn
        Artifacts:
          Type: CODEPIPELINE
          Name: MyProject
        Environment:
          ComputeType: BUILD_GENERAL1_SMALL
          Type: LINUX_CONTAINER
          Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        Source:
          Type: CODEPIPELINE
          # This file (buildspec.yml In Source code) contains commands to pacakge serverless app
          BuildSpec: buildspec.yml

    CodeDeployDev:
      Type: "AWS::CodeBuild::Project"
      Properties:
        Name: !Sub ${AWS::StackName}-CodeDeployDev
        ServiceRole: !GetAtt CodeBuildRole.Arn
        Artifacts:
          Type: CODEPIPELINE
          Name: MyProject
        Environment:
          ComputeType: BUILD_GENERAL1_SMALL
          Type: LINUX_CONTAINER
          Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
          EnvironmentVariables:
            - Name: STAGE_NAME
              Value: dev
        Source:
          Type: CODEPIPELINE
          # This file (buildspec.yml In Source code) contains commands to deploy serverless app
          BuildSpec: deploy_buildspec.yml

    CodeDeployProd:
      Type: "AWS::CodeBuild::Project"
      Properties:
        Name: !Sub ${AWS::StackName}-CodeDeployProd
        ServiceRole: !GetAtt CodeBuildRole.Arn
        Artifacts:
          Type: CODEPIPELINE
          Name: MyProject
        Environment:
          ComputeType: BUILD_GENERAL1_SMALL
          Type: LINUX_CONTAINER
          Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
          EnvironmentVariables:
            - Name: STAGE_NAME
              Value: prod
        Source:
          Type: CODEPIPELINE
          # This file (buildspec.yml In Source code) contains commands to deploy serverless app
          BuildSpec: deploy_buildspec.yml

    # Create S3 Buckets (Storing Pipeline Artifacts)
    PipelineBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: !Sub ${AWS::StackName}-pipelineartifacts

  Outputs:
    OrdersTable:
      Description: "Orders Table Name"
      Value: !Ref OrdersTable
